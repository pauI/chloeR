% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{distance}
\alias{distance}
\title{Compute Distance From Source Pixels}
\usage{
distance(
  input_raster,
  distance_sources,
  distance_type = "EUCLIDIAN",
  friction_raster = NULL,
  max_distance = NULL,
  output_raster,
  properties_file = NULL
)
}
\arguments{
\item{input_raster}{A path to the input raster file as a character string or
a Raster* object from which the filename will be extracted using \code{input_raster@filename}.}

\item{distance_sources}{A list of values specifying the source pixels
in the input raster.}

\item{distance_type}{Either "EUCLIDEAN" or "FUNCTIONAL". Specifies whether to
compute Euclidean or Functional distances. Defaults to "EUCLIDEAN".}

\item{friction_raster}{Optional path to a Friction Raster, which provides weights
affecting the cost of moving through different areas during the calculation
of Functional distances. Must match the dimensions and coordinate reference
system of the input raster. Set to NULL for EUCLIDEAN calculations.}

\item{max_distance}{Optionally limit the computed distance to a certain value.
Ignored for 'EUCLIDEAN' computations. Setting it to a positive value enables
limiting the Functional distance computation up to the given limit.}

\item{output_raster}{A path to the output raster file as a character string.}

\item{properties_file}{An optional path to a JSON properties file used to store
metadata about the processing performed by this function. If not specified, no
properties file will be generated.}
}
\description{
This function calculates the distance between every pixel in the input raster
and a set of source pixels, whose indices are stored in 'distance_sources'.
Distances can be calculated Euclidean ('EUCLIDEAN') or Functional ('FUNCTIONAL').
When computing functional distances, they can be optionally weighted by a
separate friction raster. Additionally, a maximum distance threshold can be
imposed via the 'max_distance' parameter.
}
\examples{
\dontrun{
distance("path/to/input_raster.tif", c(1, 2, 3, 4), max_distance = 250, output_raster = "path/to/output_raster.tif")
}
}
